package lyc.compiler;

import java_cup.runtime.*;

class Parser;

action code {:
  private boolean logmsg = true;
:};

parser code {:
  //Override del metodo que reporta errores sintacticos
  public void syntax_error(Symbol cur_token){
    report_error("Error sintactico - ( Linea: " + (cur_token.left + 1) + " Columna: " + cur_token.right + " )\n",null);
    //TODO: Mirar porque esto no anda
    //System.out.println("----------" + cur_token.value); }
  }

  //https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html#errors
  public void report_fatal_error(String message, Object info) throws Exception{
    done_parsing();
    //TODO: Esto podria ser una CompilerException
    throw new Exception("Error sintactico, finalizando programa\n");
  }
:};

// Terminals
terminal T_ID;
terminal T_OR;
terminal T_AND;
terminal T_NOT;
terminal T_SUM;
terminal T_RES;
terminal T_MUL;
terminal T_DIV;
terminal T_ASIG;
terminal T_COMA;
terminal T_DOSP;
terminal T_PARA;
terminal T_PARC;
terminal T_CORA;
terminal T_CORC;
terminal T_LLAVA;
terminal T_LLAVC;
terminal T_MAYOR;
terminal T_MENOR;
terminal T_CINT;
terminal T_CFLOAT;
terminal T_CSTRING;
terminal T_PRIF;
terminal T_PRINT;
terminal T_PRELSE;
terminal T_PRINIT;
terminal T_PRREAD;
terminal T_PRWRITE;
terminal T_PRWHILE;
terminal T_PRFLOAT;
terminal T_PRSTRING;
terminal T_PRREPEAT;
terminal T_PRIGUALES;

// Non Terminals
non terminal programa;
non terminal sentencia;
non terminal declaracion;
non terminal asignacion;
non terminal seleccion;
non terminal iteracion;
non terminal figuales;
non terminal frepeat;
non terminal entrada;
non terminal salida;

non terminal listavar;
non terminal listaexp;
non terminal listasent;
non terminal decvar;
non terminal tipodato;
non terminal condicion;
non terminal oplog;
non terminal opcomp;
non terminal expresion;
non terminal termino;
non terminal factor;

// Start Symbol Definition
start with programa;

programa ::= sentencia;
programa ::= programa sentencia;

sentencia ::= declaracion;
sentencia ::= asignacion;
sentencia ::= seleccion;
sentencia ::= iteracion;
sentencia ::= figuales;
sentencia ::= frepeat;
sentencia ::= entrada;
sentencia ::= salida;

declaracion ::= T_PRINIT T_LLAVA listavar T_LLAVC {: if(logmsg){ System.out.println("bloque de declaracion"); } :};

asignacion ::= T_ID T_ASIG T_CSTRING  {: if(logmsg){ System.out.println("asignacion id - cstring"); } :};
asignacion ::= T_ID T_ASIG expresion  {: if(logmsg){ System.out.println("asignacion id - expresion"); } :};

seleccion ::= T_PRIF T_PARA condicion T_PARC T_LLAVA T_LLAVC                                            {: if(logmsg){ System.out.println("seleccion vacia "); } :};
seleccion ::= T_PRIF T_PARA condicion T_PARC T_LLAVA programa T_LLAVC                                   {: if(logmsg){ System.out.println("seleccion"); } :};
seleccion ::= T_PRIF T_PARA condicion T_PARC T_LLAVA programa T_LLAVC T_PRELSE T_LLAVA T_LLAVC          {: if(logmsg){ System.out.println("seleccion con else vacio"); } :};
seleccion ::= T_PRIF T_PARA condicion T_PARC T_LLAVA programa T_LLAVC T_PRELSE T_LLAVA programa T_LLAVC {: if(logmsg){ System.out.println("seleccion con else"); } :};

iteracion ::= T_PRWHILE T_PARA condicion T_PARC T_LLAVA T_LLAVC           {: if(logmsg){ System.out.println("iteracion vacia"); } :};
iteracion ::= T_PRWHILE T_PARA condicion T_PARC T_LLAVA programa T_LLAVC  {: if(logmsg){ System.out.println("iteracion"); } :};

figuales ::= T_PRIGUALES T_PARA expresion T_COMA T_CORA listaexp T_CORC T_PARC {: if(logmsg){ System.out.println("#Iguales"); } :};

frepeat ::= T_PRREPEAT T_CINT T_CORA listasent T_CORC {: if(logmsg){ System.out.println("REPEAT"); } :};

//TODO: Mirar si esto esta bien ( porque ni el lexico ni el sintactico saben el tipo de dato de una variable )
entrada ::= T_PRREAD T_PARA T_ID T_PARC {: if(logmsg){ System.out.println("read"); } :};

//TODO: Mirar si esto esta bien ( porque ni el lexico ni el sintactico saben el tipo de dato de una variable )
salida ::= T_PRWRITE T_PARA T_ID T_PARC       {: if(logmsg){ System.out.println("write - id"); } :};
salida ::= T_PRWRITE T_PARA T_CSTRING T_PARC  {: if(logmsg){ System.out.println("write - cstring"); } :};


//lista de variables
listavar ::= decvar;
listavar ::= listavar decvar;

//lista de expresiones
listaexp ::= expresion;
listaexp ::= listaexp T_COMA expresion;

//lista de sentencias
listasent ::= sentencia;
listasent ::= listasent T_COMA sentencia;

//declaracion de variables
decvar ::= T_ID T_COMA decvar;
decvar ::= T_ID T_DOSP tipodato;

tipodato ::= T_PRINT    {: if(logmsg){ System.out.println("t_print"); } :};
tipodato ::= T_PRFLOAT  {: if(logmsg){ System.out.println("t_prfloat"); } :};
tipodato ::= T_PRSTRING {: if(logmsg){ System.out.println("t_prstring"); } :};

condicion ::= T_ID opcomp T_ID                        {: if(logmsg){ System.out.println("condicion simple"); } :};
condicion ::= T_NOT T_ID opcomp T_ID                  {: if(logmsg){ System.out.println("condicion negada"); } :};
condicion ::= T_ID opcomp T_ID oplog T_ID opcomp T_ID {: if(logmsg){ System.out.println("condicion multiple"); } :};

oplog ::= T_OR  {: if(logmsg){ System.out.println("or"); } :};
oplog ::= T_AND {: if(logmsg){ System.out.println("and"); } :};

opcomp ::= T_MAYOR {: if(logmsg){ System.out.println("mayor"); } :};
opcomp ::= T_MENOR {: if(logmsg){ System.out.println("menor"); } :};

expresion ::= termino                 {: if(logmsg){ System.out.println("expresion = termino"); } :};
expresion ::= expresion T_SUM termino {: if(logmsg){ System.out.println("+"); } :};
expresion ::= expresion T_RES termino {: if(logmsg){ System.out.println("-"); } :};
termino ::= factor                    {: if(logmsg){ System.out.println("termino = factor"); } :};
termino ::= termino T_MUL factor      {: if(logmsg){ System.out.println("*"); } :};
termino ::= termino T_DIV factor      {: if(logmsg){ System.out.println("/"); } :};
factor ::= T_ID:val                   {: if(logmsg){ System.out.println("factor = id ( id: " + val + " )"); } :};
factor ::= T_CINT:val                 {: if(logmsg){ System.out.println("factor = cint ( cint: " + val + " )"); } :};
factor ::= T_CFLOAT:val               {: if(logmsg){ System.out.println("factor = cfloat ( cfloat: " + val + " )"); } :};
factor ::= T_PARA expresion T_PARC    {: if(logmsg){ System.out.println("factor = ( expresion )"); } :};