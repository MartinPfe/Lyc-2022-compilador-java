package lyc.compiler;

import java.util.*;
import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.IntermediateCodeGenerator;
import lyc.compiler.files.SymbolTableGenerator.Simbolo;

class Parser;

action code {:
  private boolean __logmsg = false;

  //Variable relacionada con ciclos while anidados
  private int __nloops = -1;

  //Variable relacionada con condiciones multiples
  private int __condmul = 0;

  private String __opcmp = "";
  private String __oplog = "";

  //Variable relacionada con el bloque de declaracion
  private boolean __declaracion = false;

  //Variables relacionadas con la funcion figuales
  private String __figuales_pivot = "__figuales_pivot";
  private String __figuales_cont = "__figuales_cont";
  private String __figuales_exp = "__figuales_exp";

  //Variable relacionada con la funci√≥n Repeat Inline:
  private String __repeat_cantidad = "__repeat_cantidad";

  //Variables relacionadas con el bloque de declaracion
  private SymbolTableGenerator.Tipo __tipo_dato_var;
  private List<Object> __lista_variables = new ArrayList<Object>();

  private Simbolo __simbolo;
:};

parser code {:
  //Override del metodo que reporta errores sintacticos
  public void syntax_error(Symbol cur_token){
    report_error("Error sintactico - ( Linea: " + (cur_token.left + 1) + " Columna: " + cur_token.right + " )\n",null);
    //TODO: Mirar porque esto no anda
    //System.out.println("----------" + cur_token.value); }
  }

  //https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html#errors
  public void report_fatal_error(String message, Object info) throws Exception{
    done_parsing();
    //TODO: Esto podria ser una CompilerException
    throw new Exception("Error sintactico, finalizando programa\n");
  }
:};

// Terminals
terminal T_ID;
terminal T_OR;
terminal T_AND;
terminal T_NOT;
terminal T_SUM;
terminal T_RES;
terminal T_MUL;
terminal T_DIV;
terminal T_ASIG;
terminal T_COMA;
terminal T_DOSP;
terminal T_PARA;
terminal T_PARC;
terminal T_CORA;
terminal T_CORC;
terminal T_LLAVA;
terminal T_LLAVC;
terminal T_MAYOR;
terminal T_MENOR;
terminal T_CINT;
terminal T_CFLOAT;
terminal T_CSTRING;
terminal T_PRIF;
terminal T_PRINT;
terminal T_PRELSE;
terminal T_PRINIT;
terminal T_PRREAD;
terminal T_PRWRITE;
terminal T_PRWHILE;
terminal T_PRFLOAT;
terminal T_PRSTRING;
terminal T_PRREPEAT;
terminal T_PRIGUALES;

// Non Terminals
non terminal codigo;
non terminal programa;
non terminal sentencia;
non terminal declaracion;
non terminal asignacion;
non terminal seleccion;
non terminal iteracion;
non terminal figuales;
non terminal frepeat;
non terminal entrada;
non terminal salida;

non terminal listavar;
non terminal listaexp;
non terminal listasent;
non terminal decvar;
non terminal tipodato;
non terminal condicion;
non terminal oplog;
non terminal opcomp;
non terminal expresion;
non terminal termino;
non terminal factor;

// Start Symbol Definition
start with programa;

programa ::=;
programa ::=
          {:
            if(__logmsg){
              if(!__declaracion){
              System.out.println("Programa sin declaracion previa\nFinalizando ejecucion");
              System.exit(0);
              }
            }
          :}

          codigo;

programa ::= declaracion
          {:
            if(__logmsg){
              if(!__declaracion){
              System.out.println("Declaracion");
              __declaracion = true;
              }
              else{
              System.out.println("Declaracion previa\nFinalizando ejecucion");
              System.exit(0);
              }
            }
          :}

          codigo;

codigo ::= sentencia;
codigo ::= codigo sentencia;

sentencia ::= asignacion;
sentencia ::= seleccion;
sentencia ::= iteracion;
sentencia ::= figuales;
sentencia ::= frepeat;
sentencia ::= entrada;
sentencia ::= salida;

declaracion ::= T_PRINIT T_LLAVA listavar T_LLAVC
              {:
                if(__logmsg){ System.out.println("bloque de declaracion"); }
              :};

asignacion ::= T_ID:id T_ASIG T_CSTRING:str
            {:
              __simbolo = SymbolTableGenerator.obtener_simbolo_de_tabla(id);
              if(__simbolo == null){
                //variable no declarada
                System.out.println("Variable `" + id + "` no declarada\nFinalizando ejecucion");
                System.exit(0);
              }
              if(SymbolTableGenerator.comparar_tipo(__simbolo,SymbolTableGenerator.Tipo.TIPO_STRING)){
                //no coincide el tipo de dato
                System.out.println("Asignacion de tipos no compatibles\nFinalizando ejecucion");
                System.exit(0);
              }

              IntermediateCodeGenerator.insertar(str);
              IntermediateCodeGenerator.insertar(id);
              IntermediateCodeGenerator.insertar("=");
              if(__logmsg){ System.out.println("asignacion id - cstring"); }
            :};

asignacion ::= T_ID:id T_ASIG expresion
            {:
              __simbolo = SymbolTableGenerator.obtener_simbolo_de_tabla(id);
              if(__simbolo == null){
                //variable no declarada
                System.out.println("Variable `" + id + "` no declarada\nFinalizando ejecucion");
                System.exit(0);
              }

              IntermediateCodeGenerator.insertar(id);
              IntermediateCodeGenerator.insertar("=");
              if(__logmsg){ System.out.println("asignacion id - expresion"); }
            :};

seleccion ::= T_PRIF T_PARA condicion T_PARC T_LLAVA programa T_LLAVC
          {:
            if(__condmul > 0){
              --__condmul;
              IntermediateCodeGenerator.desapilar_e_insertar(0);
            }
            IntermediateCodeGenerator.desapilar_e_insertar(0);
            if(__logmsg){ System.out.println("seleccion"); }
          :};

seleccion ::= T_PRIF T_PARA condicion T_PARC T_LLAVA programa T_LLAVC
          {:
            IntermediateCodeGenerator.desapilar_e_insertar(2);
          :}

          T_PRELSE T_LLAVA

          {:
            IntermediateCodeGenerator.insertar("BI");
            IntermediateCodeGenerator.apilar();
          :}

          programa T_LLAVC

          {:
            IntermediateCodeGenerator.desapilar_e_insertar(1);
            if(__logmsg){ System.out.println("seleccion con else"); }
          :};

iteracion ::= T_PRWHILE
          {:
            IntermediateCodeGenerator.apilar();
            IntermediateCodeGenerator.insertar("WHILE");
            ++__nloops;
          :}

          T_PARA condicion T_PARC T_LLAVA programa T_LLAVC

          {:
            IntermediateCodeGenerator.desapilar_e_insertar(2);
            IntermediateCodeGenerator.insertar("BI");
            IntermediateCodeGenerator.insertar(IntermediateCodeGenerator.obtener_tope_de_pila() + __nloops);
            --__nloops;
            if(__logmsg){ System.out.println("iteracion"); }
          :};

figuales ::= T_PRIGUALES
          {:
            IntermediateCodeGenerator.insertar("FIGUALES");
          :}

          T_PARA expresion

          {:
            IntermediateCodeGenerator.insertar(__figuales_pivot);
            IntermediateCodeGenerator.insertar("=");
          :}

          T_COMA T_CORA listaexp T_CORC T_PARC

          {:
            if(__logmsg){ System.out.println("#Iguales"); }
          :};

frepeat ::= T_PRREPEAT T_CINT:val
        {:
          IntermediateCodeGenerator.insertar(__repeat_cantidad);
          IntermediateCodeGenerator.insertar(val);
          IntermediateCodeGenerator.insertar("=");
          IntermediateCodeGenerator.apilar();
          IntermediateCodeGenerator.insertar(__repeat_cantidad);
          IntermediateCodeGenerator.insertar(0);
          IntermediateCodeGenerator.insertar("CMP");
          IntermediateCodeGenerator.insertar("BLE");
          IntermediateCodeGenerator.apilar_y_avanzar();
        :}

        T_CORA codigo T_CORC
        {:
          IntermediateCodeGenerator.insertar(__repeat_cantidad);
          IntermediateCodeGenerator.insertar(1);
          IntermediateCodeGenerator.insertar("-");
          IntermediateCodeGenerator.insertar(__repeat_cantidad);
          IntermediateCodeGenerator.insertar("=");
          IntermediateCodeGenerator.insertar("BI");
          IntermediateCodeGenerator.desapilar_e_insertar(2);
          IntermediateCodeGenerator.insertar(IntermediateCodeGenerator.obtener_tope_de_pila() + 2);
          if(__logmsg){ System.out.println("REPEAT"); }
        :};

//TODO: Mirar si esto esta bien ( porque ni el lexico ni el sintactico saben el tipo de dato de una variable )
entrada ::= T_PRREAD T_PARA T_ID:id T_PARC
        {:
          if(SymbolTableGenerator.obtener_simbolo_de_tabla(id) == null){
            if(__logmsg){System.out.println("La variable " + id + " no esta declarada\nFinalizando programa"); }
            System.exit(0);
          }

          IntermediateCodeGenerator.insertar("READ");
          IntermediateCodeGenerator.insertar(id);
          IntermediateCodeGenerator.insertar("=");
          if(__logmsg){ System.out.println("read"); }
        :};

//TODO: Mirar si esto esta bien ( porque ni el lexico ni el sintactico saben el tipo de dato de una variable )
salida ::= T_PRWRITE T_PARA T_ID:id T_PARC
        {:
          __simbolo = SymbolTableGenerator.obtener_simbolo_de_tabla(id);
          if(__simbolo == null){
            if(__logmsg){System.out.println("La variable " + id + " no esta declarada\nFinalizando programa"); }
            System.exit(0);
          }

          IntermediateCodeGenerator.insertar("WRITE");
          IntermediateCodeGenerator.insertar(__simbolo.valor);
          if(__logmsg){ System.out.println("write - id"); }
        :};

salida ::= T_PRWRITE T_PARA T_CSTRING:str T_PARC
        {:
          IntermediateCodeGenerator.insertar("WRITE");
          IntermediateCodeGenerator.insertar(str);
          if(__logmsg){ System.out.println("write - cstring"); }
        :};

//lista de variables
listavar ::= decvar;
listavar ::= listavar decvar;

//lista de expresiones
listaexp ::= expresion
          {:
            IntermediateCodeGenerator.insertar(__figuales_exp);
            IntermediateCodeGenerator.insertar("=");
            IntermediateCodeGenerator.insertar(__figuales_pivot);
            IntermediateCodeGenerator.insertar(__figuales_exp);
            IntermediateCodeGenerator.insertar("CMP");
            IntermediateCodeGenerator.insertar("BNE");
            IntermediateCodeGenerator.apilar_y_avanzar();
            IntermediateCodeGenerator.insertar(1);
            IntermediateCodeGenerator.insertar(__figuales_cont);
            IntermediateCodeGenerator.insertar("+");
            IntermediateCodeGenerator.insertar(__figuales_cont);
            IntermediateCodeGenerator.insertar("=");
            IntermediateCodeGenerator.desapilar_e_insertar(0);
          :};

listaexp ::= listaexp T_COMA expresion
          {:
            IntermediateCodeGenerator.insertar(__figuales_exp);
            IntermediateCodeGenerator.insertar("=");
            IntermediateCodeGenerator.insertar(__figuales_pivot);
            IntermediateCodeGenerator.insertar(__figuales_exp);
            IntermediateCodeGenerator.insertar("CMP");
            IntermediateCodeGenerator.insertar("BNE");
            IntermediateCodeGenerator.apilar_y_avanzar();
            IntermediateCodeGenerator.insertar(1);
            IntermediateCodeGenerator.insertar(__figuales_cont);
            IntermediateCodeGenerator.insertar("+");
            IntermediateCodeGenerator.insertar(__figuales_cont);
            IntermediateCodeGenerator.insertar("=");
            IntermediateCodeGenerator.desapilar_e_insertar(0);
          :};

//lista de sentencias
//listasent ::= sentencia;
//listasent ::= listasent T_COMA sentencia;

//declaracion de variables
decvar ::= T_ID:id
        {:
          __lista_variables.add(id);
          SymbolTableGenerator.almacenarEnTabla(SymbolTableGenerator.Tipo.TIPO_ID,id.toString());
        :}
        T_COMA decvar;

decvar ::= T_ID:id
        {:
          __lista_variables.add(id);
          SymbolTableGenerator.almacenarEnTabla(SymbolTableGenerator.Tipo.TIPO_ID,id.toString());
        :}
        T_DOSP tipodato
        {:
          SymbolTableGenerator.actualizar_tipo_de_dato(__lista_variables,__tipo_dato_var);
          __lista_variables.clear();
        :};

tipodato ::= T_PRINT
          {:
            __tipo_dato_var = SymbolTableGenerator.Tipo.TIPO_INT;
            if(__logmsg){ System.out.println("t_print"); }
          :};

tipodato ::= T_PRFLOAT
          {:
            __tipo_dato_var = SymbolTableGenerator.Tipo.TIPO_FLOAT;
            if(__logmsg){ System.out.println("t_prfloat"); }
          :};

tipodato ::= T_PRSTRING
          {:
            __tipo_dato_var = SymbolTableGenerator.Tipo.TIPO_STRING;
            if(__logmsg){ System.out.println("t_prstring"); }
          :};

condicion ::= expresion opcomp expresion
          {:
            IntermediateCodeGenerator.insertar("CMP");
            IntermediateCodeGenerator.insertar(__opcmp);
            IntermediateCodeGenerator.apilar_y_avanzar();
            if(__logmsg){ System.out.println("condicion simple"); }
          :};

condicion ::= T_NOT
          {:
            IntermediateCodeGenerator.insertar("NOT");
          :}

          expresion opcomp expresion

          {:
            IntermediateCodeGenerator.insertar("CMP");
            IntermediateCodeGenerator.insertar(__opcmp);
            IntermediateCodeGenerator.apilar_y_avanzar();
            if(__logmsg){ System.out.println("condicion negada"); }
          :};

condicion ::= expresion opcomp expresion
          {:
            IntermediateCodeGenerator.insertar("CMP");
            IntermediateCodeGenerator.insertar(__opcmp);
            IntermediateCodeGenerator.apilar_y_avanzar();
          :}

          oplog

          {:
            IntermediateCodeGenerator.insertar(__oplog);
          :}

          expresion opcomp expresion

          {:
            IntermediateCodeGenerator.insertar("CMP");
            IntermediateCodeGenerator.insertar(__opcmp);
            IntermediateCodeGenerator.apilar_y_avanzar();
            ++__condmul;
            if(__logmsg){ System.out.println("condicion multiple"); }
          :};

oplog ::= T_OR
        {:
          __oplog = "OR";
          if(__logmsg){ System.out.println("or"); }
        :};

oplog ::= T_AND
        {:
          __oplog = "AND";
          if(__logmsg){ System.out.println("and"); }
        :};

opcomp ::= T_MAYOR
        {:
          __opcmp = "BLE";
          if(__logmsg){ System.out.println("mayor"); }
        :};

opcomp ::= T_MENOR
        {:
          __opcmp = "BGE";
          if(__logmsg){ System.out.println("menor"); }
        :};

expresion ::= termino
          {:
            if(__logmsg){ System.out.println("expresion = termino"); }
          :};

expresion ::= expresion T_SUM termino
          {:
            IntermediateCodeGenerator.insertar("+");
            if(__logmsg){ System.out.println("+"); }
          :};

expresion ::= expresion T_RES termino
          {:
            IntermediateCodeGenerator.insertar("-");
            if(__logmsg){ System.out.println("-"); }
          :};

termino ::= factor
        {:
          if(__logmsg){ System.out.println("termino = factor"); }
        :};

termino ::= termino T_MUL factor
        {:
          IntermediateCodeGenerator.insertar("*");
          if(__logmsg){ System.out.println("*"); }
        :};

termino ::= termino T_DIV:val factor
        {:
          IntermediateCodeGenerator.insertar("/");
          if(__logmsg){ System.out.println("/"); }
        :};

factor ::= T_ID:val
        {:
          IntermediateCodeGenerator.insertar(val);
          if(__logmsg){ System.out.println("factor = id ( id: " + val + " )"); }
        :};

factor ::= T_CINT:val
        {:
          IntermediateCodeGenerator.insertar(val);
          if(__logmsg){ System.out.println("factor = cint ( cint: " + val + " )"); }
        :};

factor ::= T_CFLOAT:val
        {:
          IntermediateCodeGenerator.insertar(val);
          if(__logmsg){ System.out.println("factor = cfloat ( cfloat: " + val + " )"); }
        :};

factor ::= T_PARA expresion T_PARC
        {:
          if(__logmsg){ System.out.println("factor = ( expresion )"); }
        :};